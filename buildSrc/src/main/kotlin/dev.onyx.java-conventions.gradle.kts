@file:Suppress("UnstableApiUsage")

import java.util.*
import org.gradle.api.Project

/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    `java-library`
    `maven-publish`
    signing
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    implementation(kotlin("stdlib"))
    implementation(kotlin("reflect"))
    testImplementation(kotlin("test"))
}

group = "dev.onyx"
version = Config.ONYX_VERSION
java.sourceCompatibility = Config.JAVA_TARGET
java.targetCompatibility = Config.JAVA_TARGET

java {
    withSourcesJar()
}

private fun toEnvKey(propertyName: String): String {
    return propertyName
        .replace(".", "_")
        .replace(Regex("([a-z])([A-Z])"), "${'$'}1_${'$'}2")
        .uppercase(Locale.US)
}

private fun Project.findOptionalProperty(vararg keys: String): String? {
    return keys.asSequence()
        .mapNotNull { key ->
            findProperty(key)?.toString()?.ifBlank { null }
                ?: System.getenv(toEnvKey(key))?.ifBlank { null }
        }
        .firstOrNull()
}

private fun Project.findOptionalBase64Property(vararg keys: String): String? {
    return findOptionalProperty(*keys)?.let {
        String(Base64.getDecoder().decode(it)).trim()
    }
}

signing {
    val secretKey = project.findOptionalBase64Property("signing.secretKey", "maven.signing.key")
    val password = project.findOptionalProperty("signing.password", "maven.signing.password")
    if (secretKey != null && password != null) {
        useInMemoryPgpKeys(secretKey, password)
        sign(publishing.publications)
    }
}

publishing {

    repositories {
        maven {
            name = "Sonatype"
            val releasesUrl = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            val snapshotsUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            val isSnapshot = version.toString().endsWith("SNAPSHOT")
            url = if (isSnapshot) snapshotsUrl else releasesUrl

            val username = project.findOptionalProperty(
                "ossrhUsername",
                "sonatypeUsername",
                "sonatype.username",
                "maven.sonatype.username",
                "mavenCentralUsername"
            )
            val password = project.findOptionalProperty(
                "ossrhPassword",
                "sonatypePassword",
                "sonatype.password",
                "maven.sonatype.password",
                "mavenCentralPassword"
            )

            if (username != null && password != null) {
                credentials {
                    this.username = username
                    this.password = password
                }
            }
        }
    }

    publications {
        publications.create<MavenPublication>("maven") {
            from(components["java"])
            val pub = this
            pom {
                name.set(pub.artifactId)
                description.set("Onyx Database is a graph database that is written in Kotlin and supports Java and Android.  It is designed to be lightweight and easy to use.  Features include in memory database, embedded, and remote server.  It leverages its own ORM and storage.")
                url.set("http://onyx.dev")
                licenses {
                    license {
                        name.set("Free Software Foundation's GNU AGPL v3.0")
                        url.set("https://www.gnu.org/licenses/agpl-3.0.en.html")
                    }
                }
                developers {
                    developer {
                        id.set("tosborn")
                        name.set("Tim Osborn")
                        email.set("tosborn@onyx.dev")
                    }
                }
                scm {
                    url.set("https://github.com/OnyxDevTools/onyx-database-parent")
                }
            }
        }
    }
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.withType<GenerateModuleMetadata> {
    suppressedValidationErrors.add("enforced-platform")
}
