/*
 * Onyx Persistence API
 * Access your database via Web Services
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AttributeUpdate;
import io.swagger.client.model.QueryCriteria;
import io.swagger.client.model.QueryOrder;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Query
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-12-27T19:03:42.962Z")
public class Query {
  @SerializedName("entityType")
  private String entityType = null;

  @SerializedName("firstRow")
  private Integer firstRow = null;

  @SerializedName("maxResults")
  private Integer maxResults = null;

  @SerializedName("selections")
  private List<String> selections = null;

  @SerializedName("isDistinct")
  private Boolean isDistinct = null;

  @SerializedName("partition")
  private String partition = null;

  @SerializedName("updates")
  private List<AttributeUpdate> updates = null;

  @SerializedName("criteria")
  private QueryCriteria criteria = null;

  @SerializedName("queryOrders")
  private List<QueryOrder> queryOrders = null;

  public Query entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Entities to query.  This contains the entity type&#39;s canonical name.
   * @return entityType
  **/
  @ApiModelProperty(value = "Entities to query.  This contains the entity type's canonical name.")
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }

  public Query firstRow(Integer firstRow) {
    this.firstRow = firstRow;
    return this;
  }

   /**
   * First index of results to return (optional)
   * @return firstRow
  **/
  @ApiModelProperty(value = "First index of results to return (optional)")
  public Integer getFirstRow() {
    return firstRow;
  }

  public void setFirstRow(Integer firstRow) {
    this.firstRow = firstRow;
  }

  public Query maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

   /**
   * Max number of results to return (optional)
   * @return maxResults
  **/
  @ApiModelProperty(value = "Max number of results to return (optional)")
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }

  public Query selections(List<String> selections) {
    this.selections = selections;
    return this;
  }

  public Query addSelectionsItem(String selectionsItem) {
    if (this.selections == null) {
      this.selections = new ArrayList<String>();
    }
    this.selections.add(selectionsItem);
    return this;
  }

   /**
   * Attributes to select (optional).  If not defined, it will return the entity objects.
   * @return selections
  **/
  @ApiModelProperty(value = "Attributes to select (optional).  If not defined, it will return the entity objects.")
  public List<String> getSelections() {
    return selections;
  }

  public void setSelections(List<String> selections) {
    this.selections = selections;
  }

  public Query isDistinct(Boolean isDistinct) {
    this.isDistinct = isDistinct;
    return this;
  }

   /**
   * Distinct results.  Only applies to selection queries. (optional)
   * @return isDistinct
  **/
  @ApiModelProperty(value = "Distinct results.  Only applies to selection queries. (optional)")
  public Boolean getIsDistinct() {
    return isDistinct;
  }

  public void setIsDistinct(Boolean isDistinct) {
    this.isDistinct = isDistinct;
  }

  public Query partition(String partition) {
    this.partition = partition;
    return this;
  }

   /**
   * Partition to search (optional)
   * @return partition
  **/
  @ApiModelProperty(value = "Partition to search (optional)")
  public String getPartition() {
    return partition;
  }

  public void setPartition(String partition) {
    this.partition = partition;
  }

  public Query updates(List<AttributeUpdate> updates) {
    this.updates = updates;
    return this;
  }

  public Query addUpdatesItem(AttributeUpdate updatesItem) {
    if (this.updates == null) {
      this.updates = new ArrayList<AttributeUpdate>();
    }
    this.updates.add(updatesItem);
    return this;
  }

   /**
   * Attributes to update and their updated values.  This should only be defined for update queries.
   * @return updates
  **/
  @ApiModelProperty(value = "Attributes to update and their updated values.  This should only be defined for update queries.")
  public List<AttributeUpdate> getUpdates() {
    return updates;
  }

  public void setUpdates(List<AttributeUpdate> updates) {
    this.updates = updates;
  }

  public Query criteria(QueryCriteria criteria) {
    this.criteria = criteria;
    return this;
  }

   /**
   * Get criteria
   * @return criteria
  **/
  @ApiModelProperty(value = "")
  public QueryCriteria getCriteria() {
    return criteria;
  }

  public void setCriteria(QueryCriteria criteria) {
    this.criteria = criteria;
  }

  public Query queryOrders(List<QueryOrder> queryOrders) {
    this.queryOrders = queryOrders;
    return this;
  }

  public Query addQueryOrdersItem(QueryOrder queryOrdersItem) {
    if (this.queryOrders == null) {
      this.queryOrders = new ArrayList<QueryOrder>();
    }
    this.queryOrders.add(queryOrdersItem);
    return this;
  }

   /**
   * Query result order. (optional)
   * @return queryOrders
  **/
  @ApiModelProperty(value = "Query result order. (optional)")
  public List<QueryOrder> getQueryOrders() {
    return queryOrders;
  }

  public void setQueryOrders(List<QueryOrder> queryOrders) {
    this.queryOrders = queryOrders;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.entityType, query.entityType) &&
        Objects.equals(this.firstRow, query.firstRow) &&
        Objects.equals(this.maxResults, query.maxResults) &&
        Objects.equals(this.selections, query.selections) &&
        Objects.equals(this.isDistinct, query.isDistinct) &&
        Objects.equals(this.partition, query.partition) &&
        Objects.equals(this.updates, query.updates) &&
        Objects.equals(this.criteria, query.criteria) &&
        Objects.equals(this.queryOrders, query.queryOrders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityType, firstRow, maxResults, selections, isDistinct, partition, updates, criteria, queryOrders);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    firstRow: ").append(toIndentedString(firstRow)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    selections: ").append(toIndentedString(selections)).append("\n");
    sb.append("    isDistinct: ").append(toIndentedString(isDistinct)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    queryOrders: ").append(toIndentedString(queryOrders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

