/*
 * Onyx Persistence API
 * Access your database via Web Services
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import com.onyxdevtools.entity.Job;
import com.onyxdevtools.entity.Person;
import io.swagger.client.ApiException;
import io.swagger.client.model.*;
import org.junit.Test;

import java.util.*;

/**
 * API tests for PersistenceApi
 */
public class PersistenceApiTest {

    private final PersistenceApi api = new PersistenceApi();

    
    /**
     * Get count for query
     *
     * Get the number of items matching query criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countPostTest() throws ApiException {
        saveEntityPostTest();

        Query query = new Query();
        query.setEntityType("com.onyxdevtools.entity.Person");
        query.setFirstRow(0);

        Integer response = api.countPost(query);
        assert response > 0;
    }
    
    /**
     * Bulk Delete Managed Entities
     *
     * This is used to batch delete entities in order to provide optimized throughput. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEntitiesPostTest() throws ApiException {
        saveEntitiesPostTest();

        Query query = new Query();
        query.setEntityType("com.onyxdevtools.entity.Person");

        QueryCriteria criteria = new QueryCriteria();
        criteria.setAttribute("personId");
        criteria.setOperator(QueryCriteria.OperatorEnum.IN);
        criteria.setValue(Arrays.asList("Person1", "Person2"));
        query.setCriteria(criteria);

        assert api.countPost(query) == 2;

        Person person = new Person();
        person.setPersonId("Person1");

        Person person2 = new Person();
        person2.setPersonId("Person2");

        DeleteEntitiesRequest request = new DeleteEntitiesRequest();
        request.addEntitiesItem(person);
        request.addEntitiesItem(person2);
        request.setType("com.onyxdevtools.entity.Person");

        api.deleteEntitiesPost(request);

        assert api.countPost(query) == 0;
    }
    
    /**
     * Delete Managed Entity
     *
     * The Delete Entity endpoint is used to persist an entity and cascade entity relationships. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEntityPostTest() throws ApiException {
        Person person = new Person();
        person.setPersonId("Person5");

        SaveEntityRequest request = new SaveEntityRequest();
        request.setEntity(person);
        request.setType("com.onyxdevtools.entity.Person");
        api.saveEntityPost(request);

        FindRequest findRequest = new FindRequest();
        findRequest.setType("com.onyxdevtools.entity.Person");
        findRequest.setId("Person5");
        Object returnValue = api.existsWithIdPost(findRequest);
        assert returnValue != null;

        DeleteEntityRequest deleteEntityRequest = new DeleteEntityRequest();
        deleteEntityRequest.entity(person);
        deleteEntityRequest.setType("com.onyxdevtools.entity.Person");
        api.deleteEntityPost(deleteEntityRequest);

        returnValue = api.existsWithIdPost(findRequest);
        assert returnValue.equals(false);
    }
    
    /**
     * Execute Delete Query
     *
     * Execute delete query with defined criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeDeletePostTest() throws ApiException {
        saveEntityPostTest();

        Query query = new Query();
        query.setEntityType("com.onyxdevtools.entity.Person");
        query.setFirstRow(0);

        QueryCriteria criteria = new QueryCriteria();
        criteria.setAttribute("personId");
        criteria.setOperator(QueryCriteria.OperatorEnum.EQUAL);
        criteria.setValue("Person3");
        query.setCriteria(criteria);

        Integer response = api.executeDeletePost(query);
        assert response > 0;
    }
    
    /**
     * Execute Query
     *
     * Execute query with defined criteria 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeQueryPostTest() throws ApiException {
        saveEntityPostTest();

        Query query = new Query();
        query.setEntityType("com.onyxdevtools.entity.Person");
        query.setFirstRow(0);

        QueryCriteria criteria = new QueryCriteria();
        criteria.setAttribute("personId");
        criteria.setOperator(QueryCriteria.OperatorEnum.NOT_CONTAINS);
        criteria.setValue("ASDF");
        query.setCriteria(criteria);

        QueryResponse response = api.executeQueryPost(query);
        assert response.getMaxResults() > 0;
        assert response.getResults().get(0) != null;
    }
    
    /**
     * Execute Update Query
     *
     * Execute update query with defined criteria and update instructions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeUpdatePostTest() throws ApiException {
        saveEntityPostTest();

        Query query = new Query();
        query.setEntityType("com.onyxdevtools.entity.Person");
        query.setFirstRow(0);

        QueryCriteria criteria = new QueryCriteria();
        criteria.setAttribute("personId");
        criteria.setOperator(QueryCriteria.OperatorEnum.EQUAL);
        criteria.setValue("Person3");
        query.setCriteria(criteria);

        AttributeUpdate attributeUpdate = new AttributeUpdate();
        attributeUpdate.setFieldName("firstName");
        attributeUpdate.setValue("Bob");
        query.addUpdatesItem(attributeUpdate);

        Integer response = api.executeUpdatePost(query);
        assert response > 0;
    }
    
    /**
     * Entity exists
     *
     * Find Managed Entity by primary Key within Partition(optional) and determine if it exists 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void existsWithIdPostTest() throws ApiException {
        Person person = new Person();
        person.setPersonId("Person4");

        SaveEntityRequest request = new SaveEntityRequest();
        request.setEntity(person);
        request.setType("com.onyxdevtools.entity.Person");
        api.saveEntityPost(request);

        Query query = new Query();
        query.setEntityType("com.onyxdevtools.entity.Person");

        FindRequest findRequest = new FindRequest();
        findRequest.setType("com.onyxdevtools.entity.Person");
        findRequest.setId("Person4");
        Object returnValue = api.existsWithIdPost(findRequest);
        assert returnValue != null;
    }
    
    /**
     * Find Managed Entity by Primary Key
     *
     * Find Managed Entity by primary Key within Partition(optional) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findByIdPostTest() throws ApiException {
        Person person = new Person();
        person.setPersonId("Person4");

        SaveEntityRequest request = new SaveEntityRequest();
        request.setEntity(person);
        request.setType("com.onyxdevtools.entity.Person");
        api.saveEntityPost(request);

        Query query = new Query();
        query.setEntityType("com.onyxdevtools.entity.Person");

        FindRequest findRequest = new FindRequest();
        findRequest.setType("com.onyxdevtools.entity.Person");
        findRequest.setId("Person4");
        Object returnValue = api.findByIdPost(findRequest);
        assert returnValue != null;
    }

    /**
     * Bulk Save Managed Entities
     *
     * This is used to batch save entities in order to provide optimized throughput. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveEntitiesPostTest() throws ApiException {
        Person person = new Person();
        person.setPersonId("Person1");

        Person person2 = new Person();
        person2.setPersonId("Person2");

        SaveEntitiesRequest request = new SaveEntitiesRequest();
        request.addEntitiesItem(person);
        request.addEntitiesItem(person2);
        request.setType("com.onyxdevtools.entity.Person");
        api.saveEntitiesPost(request);

        Query query = new Query();
        query.setEntityType("com.onyxdevtools.entity.Person");

        QueryCriteria criteria = new QueryCriteria();
        criteria.setAttribute("personId");
        criteria.setOperator(QueryCriteria.OperatorEnum.IN);
        criteria.setValue(Arrays.asList("Person1", "Person2"));
        query.setCriteria(criteria);

        assert api.countPost(query) == 2;
    }
    
    /**
     * Save Managed Entity
     *
     * The Save Entity endpoint is used to persist an entity and cascade entity relationships. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveEntityPostTest() throws ApiException {
        Person person = new Person();
        person.setPersonId("Person3");

        SaveEntityRequest request = new SaveEntityRequest();
        request.setEntity(person);
        request.setType("com.onyxdevtools.entity.Person");
        api.saveEntityPost(request);

        Query query = new Query();
        query.setEntityType("com.onyxdevtools.entity.Person");

        QueryCriteria criteria = new QueryCriteria();
        criteria.setAttribute("personId");
        criteria.setOperator(QueryCriteria.OperatorEnum.EQUAL);
        criteria.setValue("Person3");
        query.setCriteria(criteria);

        assert api.countPost(query) == 1;
    }
    
    /**
     * Bulk Save Relationships
     *
     * This is used to batch save an entity&#39;s relationship in order to offer more throughput than persisting. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveRelationshipsPostTest() throws ApiException {

        saveEntityPostTest();

        Job job1 = new Job();
        job1.setJobId(1);
        job1.setDescription("Shitty Job");

        SaveEntityRequest saveEntityRequest = new SaveEntityRequest();
        saveEntityRequest.setEntity(job1);
        saveEntityRequest.setType("com.onyxdevtools.entity.Job");

        api.saveEntityPost(saveEntityRequest);

        Job job2 = new Job();
        job2.setJobId(2);
        job2.setDescription("Other Shitty Job");
        saveEntityRequest.setEntity(job2);

        api.saveEntityPost(saveEntityRequest);

        Person person = new Person();
        person.setPersonId("Person3");

        SaveRelationshipRequest request = new SaveRelationshipRequest();
        request.setEntity(person);
        request.setRelationship("jobs");
        request.addIdentifiersItem(1);
        request.addIdentifiersItem(2);
        request.setType("com.onyxdevtools.entity.Person");

        api.saveRelationshipsPost(request);
    }

    /**
     * Initialize Managed Entity&#39;s relationship by attribute name
     *
     * Hydrate relationship associated to that entity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initializePostTest() throws ApiException {
        saveRelationshipsPostTest();

        InitializeRequest request = new InitializeRequest();
        request.setAttribute("jobs");
        request.setEntityId("Person3");
        request.setEntityType("com.onyxdevtools.entity.Person");

        List<Object> response = api.initializePost(request);

        assert response.size() == 2;
    }
}
